require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PledgesController do

  # This should return the minimal set of attributes required to create a valid
  # Pledge. As you add validations to Pledge, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "mission" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PledgesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all pledges as @pledges" do
      pledge = Pledge.create! valid_attributes
      get :index, {}, valid_session
      assigns(:pledges).should eq([pledge])
    end
  end

  describe "GET show" do
    it "assigns the requested pledge as @pledge" do
      pledge = Pledge.create! valid_attributes
      get :show, {:id => pledge.to_param}, valid_session
      assigns(:pledge).should eq(pledge)
    end
  end

  describe "GET new" do
    it "assigns a new pledge as @pledge" do
      get :new, {}, valid_session
      assigns(:pledge).should be_a_new(Pledge)
    end
  end

  describe "GET edit" do
    it "assigns the requested pledge as @pledge" do
      pledge = Pledge.create! valid_attributes
      get :edit, {:id => pledge.to_param}, valid_session
      assigns(:pledge).should eq(pledge)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Pledge" do
        expect {
          post :create, {:pledge => valid_attributes}, valid_session
        }.to change(Pledge, :count).by(1)
      end

      it "assigns a newly created pledge as @pledge" do
        post :create, {:pledge => valid_attributes}, valid_session
        assigns(:pledge).should be_a(Pledge)
        assigns(:pledge).should be_persisted
      end

      it "redirects to the created pledge" do
        post :create, {:pledge => valid_attributes}, valid_session
        response.should redirect_to(Pledge.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved pledge as @pledge" do
        # Trigger the behavior that occurs when invalid params are submitted
        Pledge.any_instance.stub(:save).and_return(false)
        post :create, {:pledge => { "mission" => "invalid value" }}, valid_session
        assigns(:pledge).should be_a_new(Pledge)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Pledge.any_instance.stub(:save).and_return(false)
        post :create, {:pledge => { "mission" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested pledge" do
        pledge = Pledge.create! valid_attributes
        # Assuming there are no other pledges in the database, this
        # specifies that the Pledge created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Pledge.any_instance.should_receive(:update).with({ "mission" => "MyString" })
        put :update, {:id => pledge.to_param, :pledge => { "mission" => "MyString" }}, valid_session
      end

      it "assigns the requested pledge as @pledge" do
        pledge = Pledge.create! valid_attributes
        put :update, {:id => pledge.to_param, :pledge => valid_attributes}, valid_session
        assigns(:pledge).should eq(pledge)
      end

      it "redirects to the pledge" do
        pledge = Pledge.create! valid_attributes
        put :update, {:id => pledge.to_param, :pledge => valid_attributes}, valid_session
        response.should redirect_to(pledge)
      end
    end

    describe "with invalid params" do
      it "assigns the pledge as @pledge" do
        pledge = Pledge.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Pledge.any_instance.stub(:save).and_return(false)
        put :update, {:id => pledge.to_param, :pledge => { "mission" => "invalid value" }}, valid_session
        assigns(:pledge).should eq(pledge)
      end

      it "re-renders the 'edit' template" do
        pledge = Pledge.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Pledge.any_instance.stub(:save).and_return(false)
        put :update, {:id => pledge.to_param, :pledge => { "mission" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested pledge" do
      pledge = Pledge.create! valid_attributes
      expect {
        delete :destroy, {:id => pledge.to_param}, valid_session
      }.to change(Pledge, :count).by(-1)
    end

    it "redirects to the pledges list" do
      pledge = Pledge.create! valid_attributes
      delete :destroy, {:id => pledge.to_param}, valid_session
      response.should redirect_to(pledges_url)
    end
  end

  #### Click ####
  describe "GET click" do
    let(:pledge) { FactoryGirl.create(:not_clicked_pledge) }
    let(:click_request) { get :click, id: pledge }

    context 'current_browser not present' do
      it "should redirect to pledge page" do
        click_request
        response.should redirect_to(pledge)
      end

      it "should show an error message" do
        click_request
        expect( request.flash[:alert] ).to eq('There was an error when trying to count your click. Please try again.')
      end
    end

    context 'Unique Click' do
      before :each do
        @current_browser = FactoryGirl.create(:browser)

        session[:evercookie] = {}
        session[:evercookie][:cfbid] = @current_browser.token
      end

      it "current_browser should not be present in pledge's click_browsers" do
        expect( pledge.click_browsers ).not_to include( @current_browser )
      end

      it "should create a unique click" do
        expect{ click_request }.to change{ pledge.clicks.count }.by(1)
      end

      it "should not create a bonus click" do
        expect{ click_request }.not_to change{ pledge.bonus_clicks.count }
      end

      it "should redirect to pledge's website url" do
        click_request
        expect{ response }.to redirect_to( pledge.website_url )
      end
    end

    context 'Bonus Clicks' do
      before :each do
        @current_browser = FactoryGirl.create(:browser)
        @unique_click = FactoryGirl.create(:click, pledge: pledge, browser: @current_browser)

        session[:evercookie] = {}
        session[:evercookie][:cfbid] = @current_browser.token
      end

      it "current_browser should be present in pledge's click_browsers" do
        expect( pledge.click_browsers ).to include( @current_browser )
      end

      it "should create a bonus click" do
        expect{ click_request }.to change{ pledge.bonus_clicks.count }.by(1)
      end

      it "should not create a unique click" do
        expect{ click_request }.not_to change{ pledge.clicks.count }
      end

      it "should redirect to pledge's website url" do
        click_request
        expect{ response }.to redirect_to( pledge.website_url )
      end
    end

    context 'Pledge fully subscribed' do
      before :each do
        @fully_pledge = FactoryGirl.create(:pledge_fully_subscribed)
        @current_browser = FactoryGirl.create(:browser)

        session[:evercookie] = {}
        session[:evercookie][:cfbid] = @current_browser.token
      end

      let(:click_request) { get :click, id: @fully_pledge }

      it "current_browser should not be present in pledge's click_browsers" do
        expect( @fully_pledge.click_browsers ).not_to include( @current_browser )
      end

      it "should create a bonus click" do
        expect{ click_request }.to change{ @fully_pledge.bonus_clicks.count }.by(1)
      end

      it "should not create a unique click" do
        expect{ click_request }.not_to change{ @fully_pledge.clicks.count }
      end

      it "should redirect to pledge's website url" do
        click_request
        expect{ response }.to redirect_to( @fully_pledge.website_url )
      end
    end

  end

end
